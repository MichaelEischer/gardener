---
apiVersion: networking.istio.io/v1alpha3
kind: EnvoyFilter
metadata:
  name: {{ .Name }}
  namespace: {{ .Namespace }}
  ownerReferences:
  - apiVersion: v1
    kind: Namespace
    name: {{ .Name }}
    uid: {{ .NamespaceUID | quote }}
    controller: false
    blockOwnerDeletion: false
spec:
  workloadSelector:
    labels:
{{- range $k, $v := .IngressGatewayLabels }}
      {{ $k }}: {{ $v }}
{{- end }}
  configPatches:
  - applyTo: FILTER_CHAIN
    match:
      context: ANY
      listener:
        portNumber: 8443
    patch:
      operation: ADD
      value:
        filters:
        - name: envoy.filters.network.tcp_proxy
          typed_config:
            "@type": type.googleapis.com/envoy.extensions.filters.network.tcp_proxy.v3.TcpProxy
            stat_prefix: "outbound|{{ .Port }}||{{ .Host }}"
            cluster: "outbound|{{ .Port }}||{{ .Host }}"
            access_log:
            - name: envoy.access_loggers.file
              typed_config:
                '@type': type.googleapis.com/envoy.extensions.access_loggers.file.v3.FileAccessLog
                path: /dev/stdout
                log_format:
                  text_format_source:
                    # This is the default log format used by Envoy except for the following changes:
                    # DOWNSTREAM_REMOTE_ADDRESS is replaced with DOWNSTREAM_DIRECT_REMOTE_ADDRESS to log the internet-routable client IP
                    inline_string: |
                      [%START_TIME%] "%REQ(:METHOD)% %REQ(X-ENVOY-ORIGINAL-PATH?:PATH)% %PROTOCOL%" %RESPONSE_CODE% %RESPONSE_FLAGS% %RESPONSE_CODE_DETAILS% %CONNECTION_TERMINATION_DETAILS% "%UPSTREAM_TRANSPORT_FAILURE_REASON%" %BYTES_RECEIVED% %BYTES_SENT% %DURATION% %RESP(X-ENVOY-UPSTREAM-SERVICE-TIME)% "%REQ(X-FORWARDED-FOR)%" "%REQ(USER-AGENT)%" "%REQ(X-REQUEST-ID)%" "%REQ(:AUTHORITY)%" "%UPSTREAM_HOST%" %UPSTREAM_CLUSTER% %UPSTREAM_LOCAL_ADDRESS% %DOWNSTREAM_LOCAL_ADDRESS% %DOWNSTREAM_DIRECT_REMOTE_ADDRESS% %REQUESTED_SERVER_NAME% %ROUTE_NAME% apiserver-proxy
        filter_chain_match:
          destination_port: {{ .Port }}
          prefix_ranges:
          - address_prefix: {{ .APIServerClusterIP }}
            prefix_len: {{ .APIServerClusterIPPrefixLen }}
  {{- if .IstioTLSTermination }}
  # The first patch adds the lua filter to the listener/http connection manager
  - applyTo: HTTP_FILTER
    match:
      context: GATEWAY
      listener:
        portNumber: 9443
        filterChain:
          filter:
            name: "envoy.filters.network.http_connection_manager"
            subFilter:
              name: "envoy.filters.http.router"
    patch:
      operation: INSERT_BEFORE
      value:
        # lua filter specification
        name: envoy.filters.http.lua
        typed_config:
          "@type": "type.googleapis.com/envoy.extensions.filters.http.lua.v3.Lua"
          defaultSourceCode:
            inlineString: |
              local function startsWith(str, prefix)
                return string.sub(str, 1, #prefix) == prefix
              end

              function envoy_on_request(request_handle)
                -- TODO ensure that a request never succeeds unless the lua script works
                -- Drop all x-remote- headers
                local remove = {}
                for key, value in pairs(request_handle:headers()) do
                  -- request_handle:logInfo("key "..key)
                  if startsWith(key:lower(), "x-remote-") then
                    remove[key] = ""
                  end
                end
                for key, value in pairs(remove) do
                  request_handle:headers():remove(key)
                end

                local validCn = false
                local streamInfo = request_handle:streamInfo()
                local ssl = streamInfo:downstreamSslConnection()

                -- TODO switch to ssl:parsedSubjectPeerCertificate() once it is available
                local cn = ssl:subjectPeerCertificate()
                -- request_handle:logInfo("subject: " .. tostring(cn))
                if cn ~= "" then
                  streamInfo:dynamicMetadata():set("envoy.filters.http.lua", "secure", "mutual")
                end
                -- apparently the dynamic metadata is only set when also modifying headers...
                request_handle:headers():add("foo", "bar")

                for pair in string.gmatch(cn, "([^,]+)") do
                    -- request_handle:logInfo("parsing: " .. pair)
                    local key, value = pair:match("([^=]+)=([^=]+)")
                    if key == "CN" then
                      request_handle:headers():add("X-Remote-User", value)
                    elseif key == "O" then
                      request_handle:headers():add("X-Remote-Group", value)
                    else
                      -- kill request
                      request_handle:respond({[":status"] = "400"}, "invalid certificate subject")
                    end
                end
              end
  - applyTo: HTTP_ROUTE
    match:
      context: GATEWAY
    patch:
      operation: INSERT_BEFORE
      value:
        match:
          dynamic_metadata:
          - filter: envoy.filters.http.lua
            path:
            - key: secure
            value:
              string_match:
                exact: mutual
          prefix: /
        route:
          cluster: outbound|{{ .Port }}||{{ .MutualTLSHost }}
  {{- end }}
